{"version":3,"sources":["logo.svg","App.js","registerServiceWorker.js","reducers/initialState.js","actions/actionTypes.js","reducers/movieReducer.js","reducers/rootReducer.js","store/configureStore.js","index.js"],"names":["module","exports","__webpack_require__","p","ShowSlider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","requestUrl","url","fetch","then","response","json","setState","catch","err","console","log","nextProps","loadContent","moviestorender","results","map","movie","i","backDrop","backdrop_path","react_default","a","createElement","className","style","backgroundImage","ref","data-loaded","Component","App","_this3","handleKeyUp","event","searchTerm","searchUrl","handleChange","target","value","bind","assertThisInitialized","id","onChange","onKeyUp","placeholder","App_ShowSlider","title","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","initialState","movies","ADD_MOVIE","movieReducer","arguments","length","undefined","action","type","types","concat","rootReducer","combineReducers","configureStore","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","store","ReactDOM","render","react_redux_es","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7cc8fc8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass ShowSlider extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            data: []\n        }\n    }\n\n    loadContent () {\n        var requestUrl ='https://api.themoviedb.org/3/' + this.props.url + '&api_key=166624c030b91c943c397020f20525b4';\n        fetch(requestUrl).then((response) => {\n            return response.json();\n        }).then((data) => {\n            this.setState({\n                data: data\n            })\n        }).catch((err) => {\n            console.log('There has been error');\n        })\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.url !== this.props.url && nextProps.url !== ''){\n            this.setState({\n                url: nextProps.url\n            }, function () {\n                //if we update our input field by typing we want to load our content\n                this.loadContent();\n            })\n        }\n    }\n\n    render() {\n        let moviestorender = '';\n        if(this.state.data.results){\n\n            moviestorender = this.state.data.results.map((movie, i)=>{\n                //    moviestorender is a map function that uses the array this.state.data.results, //with the parameters (movie, i)\n                if (i < 9)\n                {\n                    var backDrop = 'http://image.tmdb.org/t/p/original' + movie.backdrop_path;\n                    return (\n                        <div className='Item' style={{backgroundImage: 'url(' + backDrop + ')'}}></div>\n                    )\n                }\n            })\n        }\n\n        return(\n\n            <div ref='titlecategory' className='TitleList' data-loaded={true}>\n                <div className='Title'>\n                    <div className='titles-wrapper'>\n                        <div className='search-container'>\n                            {moviestorender}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            searchTerm:\"\",\n            searchUrl:\"\"\n        }\n\n        this.handleChange.bind(this)\n        this.handleKeyUp.bind(this)\n    }\n\n    handleKeyUp = (event) => {\n        if(this.state.searchTerm !== \"\") //event.key === 'Enter' &&\n        {\n            var searchUrl =  \"search/multi?query=\" + this.state.searchTerm + \"&api_key=166624c030b91c943c397020f20525b4\";\n            this.setState({\n                searchUrl: searchUrl\n            })\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            searchTerm: event.target.value\n        })\n    }\n\n    render(){\n        return (\n            <div>\n                <header className=\"Header\">\n\n                    <div id=\"search\" className=\"Search\">\n                        <input onChange={this.handleChange} onKeyUp={this.handleKeyUp} value={this.state.searchTerm} placeholder=\"Search for a title...\"/>\n                    </div>\n\n\n                </header>\n\n\n                <ShowSlider title=\"Search Results\" url={this.state.searchUrl}/>\n\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n    movies: []\n}","export const ADD_MOVIE = \"ADD_MOVIE\";\nexport const UPDATE_MOVIE = \"UPDATE_MOVIE\";","import initialState from './initialState';\nimport * as types from '../actions/actionTypes'\n\nfunction movieReducer(state = initialState.movies, action) {\n    switch (action.type) {\n        case types.ADD_MOVIE:\n            state = state.concat(action.movie); //{...state,} three dots = crate new object with all previous properties and let me define new properties\n            return state;\n        default:\n                return state\n    }\n}\n\nexport default movieReducer;","import {combineReducers} from 'redux';\nimport movie from './movieReducer';\n\nconst rootReducer = combineReducers({\n    movie\n});\n\nexport default rootReducer;","import { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from '../reducers/rootReducer';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst configureStore =\n    process.env.NODE_ENV === \"production\"\n        ? createStore(rootReducer, applyMiddleware(thunk))\n        : createStore(rootReducer, composeEnhancer(applyMiddleware(thunk)));\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport configureStore from './store/configureStore'\nimport {Provider} from 'react-redux';\n\nconst store = configureStore;\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>\n    , document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}